call plug#begin()

" set of overwrite commands for backspace, autoload from disk etc.
Plug 'tpope/vim-sensible'
" float terminal FloaTerm
Plug 'voldikss/vim-floaterm'
" Color scheme
Plug 'nordtheme/vim'

" Plug 'terryma/vim-multiple-cursors'

" Nerd Tree file overviewer
Plug 'scrooloose/nerdtree'

" bottom line in vim
Plug 'itchyny/lightline.vim'
" fuzzy finder plugin, I do not really use it
Plug 'junegunn/fzf'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'dyng/ctrlsf.vim'

" used for nice comments
Plug 'tpope/vim-commentary'
"for C++"
"Plug 'Valloric/YouCompleteMe'"
"for python"
Plug 'sheerun/vim-polyglot'
" ====================================
" All for deoplete
" Plug 'Shougo/echodoc.vim'
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
" For C++ lsp
Plug 'neoclide/coc.nvim'

Plug 'clangd/coc-clangd'
Plug 'fannheyward/coc-pyright'
" git
Plug 'airblade/vim-gitgutter'

" for colors visualisation
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'lilydjwg/colorizer'

" For rust
Plug 'rust-lang/rust.vim'
Plug 'simrat39/rust-tools.nvim'

" For bash
" Plug 'dense-analysis/ale'
" Plug 'fatih/vim-go'

" for easy navigation
" Plug 'preservim/tagbar'
" Plug 'hrsh7th/nvim-cmp'
Plug 'ryanoasis/vim-devicons'

call plug#end()

" for vim commentary
xmap <C-_> o_gc j
nmap <C-_> gc j
omap <C-_> <Esc>v_gc 
imap <C-_> <Esc>Vgcj

" Bind Ctrl + F to open FZF in a floating terminal
" nnoremap <C-f> :call fzf#run(fzf#wrap({'options': '--preview "bat --color always {}"'})) <CR>

" nnoremap <C-f> :call fzf#run(fzf#wrap({'options': '--preview "bat --color always {}"'})) <CR>
" nnoremap <silent> <leader>e :call Fzf_dev()<CR>
" nnoremap <C-f> :FloatermNew --autoclose=2 rga-fzf --column --line-number --no-heading --color=always <CR>
nnoremap <C-f> :FloatermNew rg --column --line-number --no-heading --color=always . \| fzf --ansi --preview \"bat --style=numbers --color=always {}\" --preview-window=right:50%<CR>


" ======================================
let g:floaterm_width = 0.8   " 80% of the screen width
let g:floaterm_height = 0.8  " 80% of the screen height
let g:floaterm_position = 'center'
 

let g:python_host_prog = '/usr/bin/python3.11'
set cmdheight=2
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'echo'

set hidden
set tabstop=4
set shiftwidth=4
set softtabstop=0 noexpandtab

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
set scrolloff=5  " Keep 5 lines visible above and below the cursor when scrolling
nnoremap <C-d> <C-d>

" call deoplete#enable()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

set shortmess+=c

set number relativenumber
colorscheme nord
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" scheme for bottom line
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ }

setlocal spell spelllang=en_us

if executable('pylsp')
    " pip install python-lsp-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" C++ settings for coc-clangd and ccls
let g:coc_global_extensions = ['coc-clangd', 'coc-pyright']
" Display diagnostics
nmap <leader>d :CocCommand clangd.showDiagnostics<CR>

" Linting and formatting
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \ 'python': ['black', 'isort'],
    \ 'cpp': ['clang-format'],
    \ }
" Enable diagnostics and suggestions from clangd
let g:coc_config_home = '~/.config/vim/coc-settings.json'

" Specify the location of your custom clang-format file
let g:ale_cpp_clangformat_executable = '~/vim/.clang_format'
let g:ale_cpp_clangformat_options = '-style=file'  " Use the .clang-format file

let g:gitgutter_enabled = 1
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '~'
let g:gitgutter_sign_removed = '-'


let g:ccls = {
  \ 'index': {
  \   'threads': 4,
  \ },
  \ 'cache': {
  \   'directory': '.ccls-cache',
  \ },
  \ 'client': {
  \   'snippetSupport': v:true
  \ },
  \ }

" Automatically point to compile_commands.json if it exists
if filereadable("build/compile_commands.json")
    let g:ale_cpp_clangd_options = '--compile-commands-dir=build'
endif

set path+=**   " Recursively search all directories

